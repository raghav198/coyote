
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 89;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"a:0,1", "b:2,1", "a:0,2", "a:1,1", "b:0,0", "b:1,1", "b:2,2", "b:0,1", "a:2,1", "a:0,0", "b:0,2", "a:2,2", "b:1,0", "b:1,2", "a:2,0", "a:1,0", "b:2,0", "a:1,2"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    ctxt regs[num_registers()];
    info.eval->multiply(locs["a:0,0"], locs["b:0,0"], regs[0]);
    info.eval->relinearize_inplace(regs[0], rk);
    info.eval->multiply(locs["a:0,1"], locs["b:1,0"], regs[1]);
    info.eval->relinearize_inplace(regs[1], rk);
    info.eval->add(regs[0], regs[1], regs[2]);
    info.eval->multiply(locs["a:0,2"], locs["b:2,0"], regs[3]);
    info.eval->relinearize_inplace(regs[3], rk);
    info.eval->add(regs[2], regs[3], regs[4]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,1"], regs[5]);
    info.eval->relinearize_inplace(regs[5], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,1"], regs[6]);
    info.eval->relinearize_inplace(regs[6], rk);
    info.eval->add(regs[5], regs[6], regs[7]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,1"], regs[8]);
    info.eval->relinearize_inplace(regs[8], rk);
    info.eval->add(regs[7], regs[8], regs[9]);
    info.eval->multiply(locs["a:2,0"], locs["b:0,2"], regs[10]);
    info.eval->relinearize_inplace(regs[10], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,2"], regs[11]);
    info.eval->relinearize_inplace(regs[11], rk);
    info.eval->add(regs[10], regs[11], regs[12]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,2"], regs[13]);
    info.eval->relinearize_inplace(regs[13], rk);
    info.eval->add(regs[12], regs[13], regs[14]);
    info.eval->multiply(regs[9], regs[14], regs[15]);
    info.eval->relinearize_inplace(regs[15], rk);
    info.eval->multiply(locs["a:2,0"], locs["b:0,1"], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,1"], regs[17]);
    info.eval->relinearize_inplace(regs[17], rk);
    info.eval->add(regs[16], regs[17], regs[18]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,1"], regs[19]);
    info.eval->relinearize_inplace(regs[19], rk);
    info.eval->add(regs[18], regs[19], regs[20]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,2"], regs[21]);
    info.eval->relinearize_inplace(regs[21], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,2"], regs[22]);
    info.eval->relinearize_inplace(regs[22], rk);
    info.eval->add(regs[21], regs[22], regs[23]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,2"], regs[24]);
    info.eval->relinearize_inplace(regs[24], rk);
    info.eval->add(regs[23], regs[24], regs[25]);
    info.eval->multiply(regs[20], regs[25], regs[26]);
    info.eval->relinearize_inplace(regs[26], rk);
    info.eval->add(regs[15], regs[26], regs[27]);
    info.eval->multiply(regs[4], regs[27], regs[28]);
    info.eval->relinearize_inplace(regs[28], rk);
    info.eval->multiply(locs["a:0,0"], locs["b:0,1"], regs[29]);
    info.eval->relinearize_inplace(regs[29], rk);
    info.eval->multiply(locs["a:0,1"], locs["b:1,1"], regs[30]);
    info.eval->relinearize_inplace(regs[30], rk);
    info.eval->add(regs[29], regs[30], regs[31]);
    info.eval->multiply(locs["a:0,2"], locs["b:2,1"], regs[32]);
    info.eval->relinearize_inplace(regs[32], rk);
    info.eval->add(regs[31], regs[32], regs[33]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,0"], regs[34]);
    info.eval->relinearize_inplace(regs[34], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,0"], regs[35]);
    info.eval->relinearize_inplace(regs[35], rk);
    info.eval->add(regs[34], regs[35], regs[36]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,0"], regs[37]);
    info.eval->relinearize_inplace(regs[37], rk);
    info.eval->add(regs[36], regs[37], regs[38]);
    info.eval->multiply(locs["a:2,0"], locs["b:0,2"], regs[39]);
    info.eval->relinearize_inplace(regs[39], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,2"], regs[40]);
    info.eval->relinearize_inplace(regs[40], rk);
    info.eval->add(regs[39], regs[40], regs[41]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,2"], regs[42]);
    info.eval->relinearize_inplace(regs[42], rk);
    info.eval->add(regs[41], regs[42], regs[43]);
    info.eval->multiply(regs[38], regs[43], regs[44]);
    info.eval->relinearize_inplace(regs[44], rk);
    info.eval->multiply(locs["a:2,0"], locs["b:0,0"], regs[45]);
    info.eval->relinearize_inplace(regs[45], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,0"], regs[46]);
    info.eval->relinearize_inplace(regs[46], rk);
    info.eval->add(regs[45], regs[46], regs[47]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,0"], regs[48]);
    info.eval->relinearize_inplace(regs[48], rk);
    info.eval->add(regs[47], regs[48], regs[49]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,2"], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,2"], regs[51]);
    info.eval->relinearize_inplace(regs[51], rk);
    info.eval->add(regs[50], regs[51], regs[52]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,2"], regs[53]);
    info.eval->relinearize_inplace(regs[53], rk);
    info.eval->add(regs[52], regs[53], regs[54]);
    info.eval->multiply(regs[49], regs[54], regs[55]);
    info.eval->relinearize_inplace(regs[55], rk);
    info.eval->add(regs[44], regs[55], regs[56]);
    info.eval->multiply(regs[33], regs[56], regs[57]);
    info.eval->relinearize_inplace(regs[57], rk);
    info.eval->sub(regs[28], regs[57], regs[58]);
    info.eval->multiply(locs["a:0,0"], locs["b:0,2"], regs[59]);
    info.eval->relinearize_inplace(regs[59], rk);
    info.eval->multiply(locs["a:0,1"], locs["b:1,2"], regs[60]);
    info.eval->relinearize_inplace(regs[60], rk);
    info.eval->add(regs[59], regs[60], regs[61]);
    info.eval->multiply(locs["a:0,2"], locs["b:2,2"], regs[62]);
    info.eval->relinearize_inplace(regs[62], rk);
    info.eval->add(regs[61], regs[62], regs[63]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,0"], regs[64]);
    info.eval->relinearize_inplace(regs[64], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,0"], regs[65]);
    info.eval->relinearize_inplace(regs[65], rk);
    info.eval->add(regs[64], regs[65], regs[66]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,0"], regs[67]);
    info.eval->relinearize_inplace(regs[67], rk);
    info.eval->add(regs[66], regs[67], regs[68]);
    info.eval->multiply(locs["a:2,0"], locs["b:0,1"], regs[69]);
    info.eval->relinearize_inplace(regs[69], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,1"], regs[70]);
    info.eval->relinearize_inplace(regs[70], rk);
    info.eval->add(regs[69], regs[70], regs[71]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,1"], regs[72]);
    info.eval->relinearize_inplace(regs[72], rk);
    info.eval->add(regs[71], regs[72], regs[73]);
    info.eval->multiply(regs[68], regs[73], regs[74]);
    info.eval->relinearize_inplace(regs[74], rk);
    info.eval->multiply(locs["a:2,0"], locs["b:0,0"], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    info.eval->multiply(locs["a:2,1"], locs["b:1,0"], regs[76]);
    info.eval->relinearize_inplace(regs[76], rk);
    info.eval->add(regs[75], regs[76], regs[77]);
    info.eval->multiply(locs["a:2,2"], locs["b:2,0"], regs[78]);
    info.eval->relinearize_inplace(regs[78], rk);
    info.eval->add(regs[77], regs[78], regs[79]);
    info.eval->multiply(locs["a:1,0"], locs["b:0,1"], regs[80]);
    info.eval->relinearize_inplace(regs[80], rk);
    info.eval->multiply(locs["a:1,1"], locs["b:1,1"], regs[81]);
    info.eval->relinearize_inplace(regs[81], rk);
    info.eval->add(regs[80], regs[81], regs[82]);
    info.eval->multiply(locs["a:1,2"], locs["b:2,1"], regs[83]);
    info.eval->relinearize_inplace(regs[83], rk);
    info.eval->add(regs[82], regs[83], regs[84]);
    info.eval->multiply(regs[79], regs[84], regs[85]);
    info.eval->relinearize_inplace(regs[85], rk);
    info.eval->add(regs[74], regs[85], regs[86]);
    info.eval->multiply(regs[63], regs[86], regs[87]);
    info.eval->relinearize_inplace(regs[87], rk);
    info.eval->add(regs[58], regs[87], regs[88]);
    std::vector<ctxt> answer;
    answer.push_back(regs[88]);
    return answer;
}
    