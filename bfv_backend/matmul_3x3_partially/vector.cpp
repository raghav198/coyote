
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "001000000000100000010010000", info);
    add_bitstring(bits, "000000000100010000000000000", info);
    add_bitstring(bits, "000000000000010000000000000", info);
    add_bitstring(bits, "000000100000000000000000000", info);
    add_bitstring(bits, "111111100000000011001001001", info);
    add_bitstring(bits, "000000000000001000100000111", info);
    add_bitstring(bits, "100000000000000000000000000", info);
    add_bitstring(bits, "000010000000000000000000000", info);
    add_bitstring(bits, "000000010111101000100100100", info);
    add_bitstring(bits, "010000000000000000000000000", info);
    add_bitstring(bits, "101001000000000000000000000", info);
    add_bitstring(bits, "000000000000000010000000000", info);
    add_bitstring(bits, "001010000000000000000000000", info);
    add_bitstring(bits, "000000000001000000000000000", info);
    add_bitstring(bits, "000000100000000100001101000", info);
    add_bitstring(bits, "000010000001000001100000000", info);
    add_bitstring(bits, "100000000001000000000000000", info);
    add_bitstring(bits, "000000000000000001000000000", info);
    add_bitstring(bits, "000000000000000011000000000", info);
    add_bitstring(bits, "000100100000000010000000000", info);
    add_bitstring(bits, "010000000001000001100000000", info);
    add_bitstring(bits, "000000000000000000100000000", info);
    add_bitstring(bits, "000000001000000100010010010", info);
    add_bitstring(bits, "010000011010000000000000000", info);
    add_bitstring(bits, "000100000000000000000000000", info);
    add_bitstring(bits, "000001000000000000000000000", info);
    add_bitstring(bits, "000111000001000000000000000", info);
    add_bitstring(bits, "000000000000010001100000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(10);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_input("111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111010111111111111111111111111011111111111111111111111111110111111111111111111111111011111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111010111111111111111111111111010111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111110111111111111111111111111110", info);
    ts[2] = encrypt_input("000111111111111111111111111110001111111111111111111111111111111111111111111111111111110000011111111111111111111111101011111111111111111111111101111111111111111111111111111000001111111111111111111111111111111111111111111111111110110111111111111111111111111111000", info);
    ts[3] = encrypt_input("000111111111111111111111111110001111111111111111111111111111111111111111111111111111110000011111111111111111111111101011111111111111111111111101111111111111111111111111111000001111111111111111111111111111111111111111111111111110110111111111111111111111111111000", info);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[6];
    ctxt ss[18];

    vs[0] = ts[0]; // vector load instr
    info.eval->rotate_rows(vs[0], -1, gk, ss[0]); // __s0 = __v0 >> 1
    info.eval->rotate_rows(vs[0], -26, gk, ss[1]); // __s1 = __v0 >> 26
    info.eval->rotate_rows(vs[0], -4, gk, ss[2]); // __s2 = __v0 >> 4
    vs[1] = ts[2]; // vector load instr
    info.eval->rotate_rows(vs[1], -26, gk, ss[3]); // __s3 = __v1 >> 26
    info.eval->rotate_rows(vs[1], -11, gk, ss[4]); // __s4 = __v1 >> 11
    info.eval->rotate_rows(vs[1], -6, gk, ss[5]); // __s5 = __v1 >> 6
    info.eval->rotate_rows(vs[1], -10, gk, ss[6]); // __s6 = __v1 >> 10
    info.eval->rotate_rows(vs[1], -21, gk, ss[7]); // __s7 = __v1 >> 21
    info.eval->rotate_rows(vs[1], -17, gk, ss[8]); // __s8 = __v1 >> 17
    info.eval->rotate_rows(vs[1], -14, gk, ss[9]); // __s9 = __v1 >> 14
    
    // __t4 = blend(__v0@111111100000000011001001001, __s1@000000010111101000100100100, __s0@000000001000000100010010010, __s2@000000000000010000000000000)
    ctxt t4_1, t4_2, t4_3, t4_4;
    info.eval->multiply_plain(vs[0], bits["111111100000000011001001001"], t4_1);
    info.eval->multiply_plain(ss[1], bits["000000010111101000100100100"], t4_2);
    info.eval->multiply_plain(ss[0], bits["000000001000000100010010010"], t4_3);
    info.eval->multiply_plain(ss[2], bits["000000000000010000000000000"], t4_4);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4}, ts[4]);
    
    
    // __t5 = blend(__s7@100000000000000000000000000, __s9@010000011010000000000000000, __s3@001000000000100000010010000, __s8@000111000001000000000000000, __v1@000000100000000100001101000, __s5@000000000100010000000000000, __s4@000000000000001000100000111, __s6@000000000000000011000000000)
    ctxt t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8;
    info.eval->multiply_plain(ss[7], bits["100000000000000000000000000"], t5_1);
    info.eval->multiply_plain(ss[9], bits["010000011010000000000000000"], t5_2);
    info.eval->multiply_plain(ss[3], bits["001000000000100000010010000"], t5_3);
    info.eval->multiply_plain(ss[8], bits["000111000001000000000000000"], t5_4);
    info.eval->multiply_plain(vs[1], bits["000000100000000100001101000"], t5_5);
    info.eval->multiply_plain(ss[5], bits["000000000100010000000000000"], t5_6);
    info.eval->multiply_plain(ss[4], bits["000000000000001000100000111"], t5_7);
    info.eval->multiply_plain(ss[6], bits["000000000000000011000000000"], t5_8);
    info.eval->add_many({t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7, t5_8}, ts[5]);
    
    info.eval->multiply(ts[4], ts[5], vs[2]); // __v2 = __t4 * __t5
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -4, gk, ss[10]); // __s10 = __v2 >> 4
    info.eval->rotate_rows(vs[2], -15, gk, ss[11]); // __s11 = __v2 >> 15
    info.eval->rotate_rows(vs[2], -26, gk, ss[12]); // __s12 = __v2 >> 26
    info.eval->rotate_rows(vs[2], -22, gk, ss[13]); // __s13 = __v2 >> 22
    info.eval->rotate_rows(vs[2], -3, gk, ss[14]); // __s14 = __v2 >> 3
    info.eval->rotate_rows(vs[2], -12, gk, ss[15]); // __s15 = __v2 >> 12
    info.eval->rotate_rows(vs[2], -8, gk, ss[16]); // __s16 = __v2 >> 8
    
    // __t6 = blend(__s16@010000000000000000000000000, __s13@000100100000000010000000000, __s15@000010000000000000000000000, __s10@000000000001000000000000000, __v2@000000000000010001100000000)
    ctxt t6_1, t6_2, t6_3, t6_4, t6_5;
    info.eval->multiply_plain(ss[16], bits["010000000000000000000000000"], t6_1);
    info.eval->multiply_plain(ss[13], bits["000100100000000010000000000"], t6_2);
    info.eval->multiply_plain(ss[15], bits["000010000000000000000000000"], t6_3);
    info.eval->multiply_plain(ss[10], bits["000000000001000000000000000"], t6_4);
    info.eval->multiply_plain(vs[2], bits["000000000000010001100000000"], t6_5);
    info.eval->add_many({t6_1, t6_2, t6_3, t6_4, t6_5}, ts[6]);
    
    
    // __t7 = blend(__s13@010000000001000001100000000, __s12@000100000000000000000000000, __s10@000010000000000000000000000, __s16@000000100000000000000000000, __s14@000000000000010000000000000, __s11@000000000000000010000000000)
    ctxt t7_1, t7_2, t7_3, t7_4, t7_5, t7_6;
    info.eval->multiply_plain(ss[13], bits["010000000001000001100000000"], t7_1);
    info.eval->multiply_plain(ss[12], bits["000100000000000000000000000"], t7_2);
    info.eval->multiply_plain(ss[10], bits["000010000000000000000000000"], t7_3);
    info.eval->multiply_plain(ss[16], bits["000000100000000000000000000"], t7_4);
    info.eval->multiply_plain(ss[14], bits["000000000000010000000000000"], t7_5);
    info.eval->multiply_plain(ss[11], bits["000000000000000010000000000"], t7_6);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4, t7_5, t7_6}, ts[7]);
    
    info.eval->add(ts[6], ts[7], vs[3]); // __v3 = __t6 + __t7
    info.eval->rotate_rows(vs[3], -26, gk, ss[17]); // __s17 = __v3 >> 26
    info.eval->add(ss[10], vs[3], vs[4]); // __v4 = __s10 + __v3
    
    // __t8 = blend(__s15@100000000001000000000000000, __s12@001010000000000000000000000, __s16@000001000000000000000000000, __s11@000000000000000001000000000, __s10@000000000000000000100000000)
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5;
    info.eval->multiply_plain(ss[15], bits["100000000001000000000000000"], t8_1);
    info.eval->multiply_plain(ss[12], bits["001010000000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[16], bits["000001000000000000000000000"], t8_3);
    info.eval->multiply_plain(ss[11], bits["000000000000000001000000000"], t8_4);
    info.eval->multiply_plain(ss[10], bits["000000000000000000100000000"], t8_5);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5}, ts[8]);
    
    
    // __t9 = blend(__s17@101001000000000000000000000, __v3@000010000001000001100000000)
    ctxt t9_1, t9_2;
    info.eval->multiply_plain(ss[17], bits["101001000000000000000000000"], t9_1);
    info.eval->multiply_plain(vs[3], bits["000010000001000001100000000"], t9_2);
    info.eval->add(t9_1, t9_2, ts[9]);
    
    info.eval->add(ts[8], ts[9], vs[5]); // __v5 = __t8 + __t9
    return vs[5];
}
    