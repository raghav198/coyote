
# include "../scalar.hpp"
int ScalarProgram::num_registers()
{
    return 105;
}

std::vector<std::string> ScalarProgram::vars_used()
{
    return {"distances_5x5_fully(ys):2", "distances_5x5_fully(ys):1", "distances_5x5_fully(xs):2", "distances_5x5_fully(xs):3", "distances_5x5_fully(xs):1", "distances_5x5_fully(xs):4", "distances_5x5_fully(xs):0", "distances_5x5_fully(ys):3", "distances_5x5_fully(ys):4", "distances_5x5_fully(ys):0"};
}

std::vector<ctxt> ScalarProgram::computation(std::map<std::string, ctxt> locs, RuntimeContext &info)
{
    seal::RelinKeys& rk = info.keys->rk;
    ctxt regs[num_registers()];
    regs[0] = locs["distances_5x5_fully(xs):0"];
    regs[1] = locs["distances_5x5_fully(ys):0"];
    info.eval->sub(regs[0], regs[1], regs[2]);
    info.eval->sub(regs[0], regs[1], regs[3]);
    info.eval->multiply(regs[2], regs[3], regs[4]);
    info.eval->relinearize_inplace(regs[4], rk);
    regs[5] = locs["distances_5x5_fully(ys):1"];
    info.eval->sub(regs[0], regs[5], regs[6]);
    info.eval->sub(regs[0], regs[5], regs[7]);
    info.eval->multiply(regs[6], regs[7], regs[8]);
    info.eval->relinearize_inplace(regs[8], rk);
    regs[9] = locs["distances_5x5_fully(ys):2"];
    info.eval->sub(regs[0], regs[9], regs[10]);
    info.eval->sub(regs[0], regs[9], regs[11]);
    info.eval->multiply(regs[10], regs[11], regs[12]);
    info.eval->relinearize_inplace(regs[12], rk);
    regs[13] = locs["distances_5x5_fully(ys):3"];
    info.eval->sub(regs[0], regs[13], regs[14]);
    info.eval->sub(regs[0], regs[13], regs[15]);
    info.eval->multiply(regs[14], regs[15], regs[16]);
    info.eval->relinearize_inplace(regs[16], rk);
    regs[17] = locs["distances_5x5_fully(ys):4"];
    info.eval->sub(regs[0], regs[17], regs[18]);
    info.eval->sub(regs[0], regs[17], regs[19]);
    info.eval->multiply(regs[18], regs[19], regs[20]);
    info.eval->relinearize_inplace(regs[20], rk);
    regs[21] = locs["distances_5x5_fully(xs):1"];
    regs[22] = locs["distances_5x5_fully(ys):0"];
    info.eval->sub(regs[21], regs[22], regs[23]);
    info.eval->sub(regs[21], regs[22], regs[24]);
    info.eval->multiply(regs[23], regs[24], regs[25]);
    info.eval->relinearize_inplace(regs[25], rk);
    regs[26] = locs["distances_5x5_fully(ys):1"];
    info.eval->sub(regs[21], regs[26], regs[27]);
    info.eval->sub(regs[21], regs[26], regs[28]);
    info.eval->multiply(regs[27], regs[28], regs[29]);
    info.eval->relinearize_inplace(regs[29], rk);
    regs[30] = locs["distances_5x5_fully(ys):2"];
    info.eval->sub(regs[21], regs[30], regs[31]);
    info.eval->sub(regs[21], regs[30], regs[32]);
    info.eval->multiply(regs[31], regs[32], regs[33]);
    info.eval->relinearize_inplace(regs[33], rk);
    regs[34] = locs["distances_5x5_fully(ys):3"];
    info.eval->sub(regs[21], regs[34], regs[35]);
    info.eval->sub(regs[21], regs[34], regs[36]);
    info.eval->multiply(regs[35], regs[36], regs[37]);
    info.eval->relinearize_inplace(regs[37], rk);
    regs[38] = locs["distances_5x5_fully(ys):4"];
    info.eval->sub(regs[21], regs[38], regs[39]);
    info.eval->sub(regs[21], regs[38], regs[40]);
    info.eval->multiply(regs[39], regs[40], regs[41]);
    info.eval->relinearize_inplace(regs[41], rk);
    regs[42] = locs["distances_5x5_fully(xs):2"];
    regs[43] = locs["distances_5x5_fully(ys):0"];
    info.eval->sub(regs[42], regs[43], regs[44]);
    info.eval->sub(regs[42], regs[43], regs[45]);
    info.eval->multiply(regs[44], regs[45], regs[46]);
    info.eval->relinearize_inplace(regs[46], rk);
    regs[47] = locs["distances_5x5_fully(ys):1"];
    info.eval->sub(regs[42], regs[47], regs[48]);
    info.eval->sub(regs[42], regs[47], regs[49]);
    info.eval->multiply(regs[48], regs[49], regs[50]);
    info.eval->relinearize_inplace(regs[50], rk);
    regs[51] = locs["distances_5x5_fully(ys):2"];
    info.eval->sub(regs[42], regs[51], regs[52]);
    info.eval->sub(regs[42], regs[51], regs[53]);
    info.eval->multiply(regs[52], regs[53], regs[54]);
    info.eval->relinearize_inplace(regs[54], rk);
    regs[55] = locs["distances_5x5_fully(ys):3"];
    info.eval->sub(regs[42], regs[55], regs[56]);
    info.eval->sub(regs[42], regs[55], regs[57]);
    info.eval->multiply(regs[56], regs[57], regs[58]);
    info.eval->relinearize_inplace(regs[58], rk);
    regs[59] = locs["distances_5x5_fully(ys):4"];
    info.eval->sub(regs[42], regs[59], regs[60]);
    info.eval->sub(regs[42], regs[59], regs[61]);
    info.eval->multiply(regs[60], regs[61], regs[62]);
    info.eval->relinearize_inplace(regs[62], rk);
    regs[63] = locs["distances_5x5_fully(xs):3"];
    regs[64] = locs["distances_5x5_fully(ys):0"];
    info.eval->sub(regs[63], regs[64], regs[65]);
    info.eval->sub(regs[63], regs[64], regs[66]);
    info.eval->multiply(regs[65], regs[66], regs[67]);
    info.eval->relinearize_inplace(regs[67], rk);
    regs[68] = locs["distances_5x5_fully(ys):1"];
    info.eval->sub(regs[63], regs[68], regs[69]);
    info.eval->sub(regs[63], regs[68], regs[70]);
    info.eval->multiply(regs[69], regs[70], regs[71]);
    info.eval->relinearize_inplace(regs[71], rk);
    regs[72] = locs["distances_5x5_fully(ys):2"];
    info.eval->sub(regs[63], regs[72], regs[73]);
    info.eval->sub(regs[63], regs[72], regs[74]);
    info.eval->multiply(regs[73], regs[74], regs[75]);
    info.eval->relinearize_inplace(regs[75], rk);
    regs[76] = locs["distances_5x5_fully(ys):3"];
    info.eval->sub(regs[63], regs[76], regs[77]);
    info.eval->sub(regs[63], regs[76], regs[78]);
    info.eval->multiply(regs[77], regs[78], regs[79]);
    info.eval->relinearize_inplace(regs[79], rk);
    regs[80] = locs["distances_5x5_fully(ys):4"];
    info.eval->sub(regs[63], regs[80], regs[81]);
    info.eval->sub(regs[63], regs[80], regs[82]);
    info.eval->multiply(regs[81], regs[82], regs[83]);
    info.eval->relinearize_inplace(regs[83], rk);
    regs[84] = locs["distances_5x5_fully(xs):4"];
    regs[85] = locs["distances_5x5_fully(ys):0"];
    info.eval->sub(regs[84], regs[85], regs[86]);
    info.eval->sub(regs[84], regs[85], regs[87]);
    info.eval->multiply(regs[86], regs[87], regs[88]);
    info.eval->relinearize_inplace(regs[88], rk);
    regs[89] = locs["distances_5x5_fully(ys):1"];
    info.eval->sub(regs[84], regs[89], regs[90]);
    info.eval->sub(regs[84], regs[89], regs[91]);
    info.eval->multiply(regs[90], regs[91], regs[92]);
    info.eval->relinearize_inplace(regs[92], rk);
    regs[93] = locs["distances_5x5_fully(ys):2"];
    info.eval->sub(regs[84], regs[93], regs[94]);
    info.eval->sub(regs[84], regs[93], regs[95]);
    info.eval->multiply(regs[94], regs[95], regs[96]);
    info.eval->relinearize_inplace(regs[96], rk);
    regs[97] = locs["distances_5x5_fully(ys):3"];
    info.eval->sub(regs[84], regs[97], regs[98]);
    info.eval->sub(regs[84], regs[97], regs[99]);
    info.eval->multiply(regs[98], regs[99], regs[100]);
    info.eval->relinearize_inplace(regs[100], rk);
    regs[101] = locs["distances_5x5_fully(ys):4"];
    info.eval->sub(regs[84], regs[101], regs[102]);
    info.eval->sub(regs[84], regs[101], regs[103]);
    info.eval->multiply(regs[102], regs[103], regs[104]);
    info.eval->relinearize_inplace(regs[104], rk);
    std::vector<ctxt> answer;
    answer.push_back(regs[4]);
    answer.push_back(regs[8]);
    answer.push_back(regs[12]);
    answer.push_back(regs[16]);
    answer.push_back(regs[20]);
    answer.push_back(regs[25]);
    answer.push_back(regs[29]);
    answer.push_back(regs[33]);
    answer.push_back(regs[37]);
    answer.push_back(regs[41]);
    answer.push_back(regs[46]);
    answer.push_back(regs[50]);
    answer.push_back(regs[54]);
    answer.push_back(regs[58]);
    answer.push_back(regs[62]);
    answer.push_back(regs[67]);
    answer.push_back(regs[71]);
    answer.push_back(regs[75]);
    answer.push_back(regs[79]);
    answer.push_back(regs[83]);
    answer.push_back(regs[88]);
    answer.push_back(regs[92]);
    answer.push_back(regs[96]);
    answer.push_back(regs[100]);
    answer.push_back(regs[104]);
    return answer;
}
    