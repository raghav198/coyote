
# include "../vector.hpp"

std::map<std::string, ptxt> VectorProgram::make_bits(RuntimeContext &info)
{
    std::map<std::string, ptxt> bits;
    add_bitstring(bits, "100000000000000000000000000", info);
    add_bitstring(bits, "000000000000110000000000000", info);
    add_bitstring(bits, "000000001000000000100000000", info);
    add_bitstring(bits, "000000000000000000000000001", info);
    add_bitstring(bits, "000000000000000000000000010", info);
    add_bitstring(bits, "000000000000000010000000000", info);
    add_bitstring(bits, "000000000000000000001000000", info);
    add_bitstring(bits, "000000000001000000000000000", info);
    add_bitstring(bits, "000000000000000000000100010", info);
    add_bitstring(bits, "000000010000000000000000000", info);
    add_bitstring(bits, "000000000000000000000100000", info);
    add_bitstring(bits, "110000000000110001000000000", info);
    add_bitstring(bits, "000000000110000000000000000", info);
    add_bitstring(bits, "000000100000000000000000000", info);
    add_bitstring(bits, "000000000000000001000000000", info);
    add_bitstring(bits, "010000000000000000000000000", info);
    return bits;
}

std::vector<ctxt> VectorProgram::initialize_temps(RuntimeContext &info)
{
    std::vector<ctxt> ts(9);
    ts[0] = encrypt_inputinfo);
    ts[1] = encrypt_inputinfo);
    ts[2] = encrypt_inputinfo);
    ts[3] = encrypt_inputinfo);
    return ts;
}

ctxt VectorProgram::computation(std::vector<ctxt> ts, std::map<std::string, ptxt> bits, RuntimeContext &info)
{
    seal::RelinKeys rk = info.keys->rk;
    seal::GaloisKeys gk = info.keys->gk;

    ctxt vs[7];
    ctxt ss[11];

    vs[0] = ts[0]; // vector load instr
    vs[1] = ts[2]; // vector load instr
    info.eval->multiply(vs[0], vs[1], vs[2]); // __v2 = __v0 * __v1
    info.eval->relinearize_inplace(vs[2], rk);
    info.eval->rotate_rows(vs[2], -26, gk, ss[0]); // __s0 = __v2 >> 26
    info.eval->rotate_rows(vs[2], -8, gk, ss[1]); // __s1 = __v2 >> 8
    info.eval->rotate_rows(vs[2], -2, gk, ss[2]); // __s2 = __v2 >> 2
    info.eval->rotate_rows(vs[2], -24, gk, ss[3]); // __s3 = __v2 >> 24
    info.eval->rotate_rows(vs[2], -3, gk, ss[4]); // __s4 = __v2 >> 3
    
    // __t4 = blend(__s4@100000000000000000000000000, __s0@010000000000000000000000000, __s1@000000000000110000000000000, __v2@000000000000000010000000000, __s2@000000000000000001000000000)
    ctxt t4_1, t4_2, t4_3, t4_4, t4_5;
    info.eval->multiply_plain(ss[4], bits["100000000000000000000000000"], t4_1);
    info.eval->multiply_plain(ss[0], bits["010000000000000000000000000"], t4_2);
    info.eval->multiply_plain(ss[1], bits["000000000000110000000000000"], t4_3);
    info.eval->multiply_plain(vs[2], bits["000000000000000010000000000"], t4_4);
    info.eval->multiply_plain(ss[2], bits["000000000000000001000000000"], t4_5);
    info.eval->add_many({t4_1, t4_2, t4_3, t4_4, t4_5}, ts[4]);
    
    
    // __t5 = blend(__v2@110000000000110001000000000, __s3@000000000000000010000000000)
    ctxt t5_1, t5_2;
    info.eval->multiply_plain(vs[2], bits["110000000000110001000000000"], t5_1);
    info.eval->multiply_plain(ss[3], bits["000000000000000010000000000"], t5_2);
    info.eval->add(t5_1, t5_2, ts[5]);
    
    info.eval->add(ts[4], ts[5], vs[3]); // __v3 = __t4 + __t5
    info.eval->rotate_rows(vs[3], -26, gk, ss[5]); // __s5 = __v3 >> 26
    info.eval->rotate_rows(vs[3], -6, gk, ss[6]); // __s6 = __v3 >> 6
    info.eval->rotate_rows(vs[3], -24, gk, ss[7]); // __s7 = __v3 >> 24
    info.eval->rotate_rows(vs[3], -16, gk, ss[8]); // __s8 = __v3 >> 16
    info.eval->multiply(vs[0], vs[1], vs[4]); // __v4 = __v0 * __v1
    info.eval->relinearize_inplace(vs[4], rk);
    
    // __t6 = blend(__s1@000000000001000000000000000, __s2@000000000000000010000000000, __v2@000000000000000000000100010)
    ctxt t6_1, t6_2, t6_3;
    info.eval->multiply_plain(ss[1], bits["000000000001000000000000000"], t6_1);
    info.eval->multiply_plain(ss[2], bits["000000000000000010000000000"], t6_2);
    info.eval->multiply_plain(vs[2], bits["000000000000000000000100010"], t6_3);
    info.eval->add_many({t6_1, t6_2, t6_3}, ts[6]);
    
    
    // __t7 = blend(__v4@000000000001000000000000000, __v3@000000000000000010000000000, __s0@000000000000000000000100000, __s2@000000000000000000000000010)
    ctxt t7_1, t7_2, t7_3, t7_4;
    info.eval->multiply_plain(vs[4], bits["000000000001000000000000000"], t7_1);
    info.eval->multiply_plain(vs[3], bits["000000000000000010000000000"], t7_2);
    info.eval->multiply_plain(ss[0], bits["000000000000000000000100000"], t7_3);
    info.eval->multiply_plain(ss[2], bits["000000000000000000000000010"], t7_4);
    info.eval->add_many({t7_1, t7_2, t7_3, t7_4}, ts[7]);
    
    info.eval->add(ts[6], ts[7], vs[5]); // __v5 = __t6 + __t7
    info.eval->rotate_rows(vs[5], -24, gk, ss[9]); // __s9 = __v5 >> 24
    info.eval->rotate_rows(vs[5], -22, gk, ss[10]); // __s10 = __v5 >> 22
    
    // __t8 = blend(__s8@000000100000000000000000000, __s6@000000010000000000000000000, __s9@000000001000000000100000000, __s7@000000000110000000000000000, __s10@000000000000000000001000000, __s5@000000000000000000000000001)
    ctxt t8_1, t8_2, t8_3, t8_4, t8_5, t8_6;
    info.eval->multiply_plain(ss[8], bits["000000100000000000000000000"], t8_1);
    info.eval->multiply_plain(ss[6], bits["000000010000000000000000000"], t8_2);
    info.eval->multiply_plain(ss[9], bits["000000001000000000100000000"], t8_3);
    info.eval->multiply_plain(ss[7], bits["000000000110000000000000000"], t8_4);
    info.eval->multiply_plain(ss[10], bits["000000000000000000001000000"], t8_5);
    info.eval->multiply_plain(ss[5], bits["000000000000000000000000001"], t8_6);
    info.eval->add_many({t8_1, t8_2, t8_3, t8_4, t8_5, t8_6}, ts[8]);
    
    info.eval->add(vs[2], ts[8], vs[6]); // __v6 = __v2 + __t8
    return vs[6];
}
    